// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kama.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kama.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kama {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameContext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kama_2eproto() {
  protobuf_AddDesc_kama_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kama.proto");
  GOOGLE_CHECK(file != NULL);
  Envelope_descriptor_ = file->message_type(0);
  static const int Envelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, datafile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, endsession_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  Frame_descriptor_ = file->message_type(1);
  static const int Frame_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, subscriber_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, measuring_pointing_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, information_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, distance_channel_tracking_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, angle_channel_tracking_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, height_channel_tracking_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, response_signal_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, gain_gontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frequency_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, antenna_pointing_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, distance_is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, agc_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, time_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frameconext_),
  };
  Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frame));
  DataFile_descriptor_ = file->message_type(2);
  static const int DataFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, mp_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, data_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, main_work_),
  };
  DataFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_descriptor_,
      DataFile::default_instance_,
      DataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile));
  EndSession_descriptor_ = file->message_type(3);
  static const int EndSession_offsets_[1] = {
  };
  EndSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndSession_descriptor_,
      EndSession::default_instance_,
      EndSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndSession));
  FrameContext_descriptor_ = file->message_type(4);
  static const int FrameContext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameContext, work_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameContext, launch_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameContext, main_work_),
  };
  FrameContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameContext_descriptor_,
      FrameContext::default_instance_,
      FrameContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameContext));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kama_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_descriptor_, &DataFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndSession_descriptor_, &EndSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameContext_descriptor_, &FrameContext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kama_2eproto() {
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete DataFile::default_instance_;
  delete DataFile_reflection_;
  delete EndSession::default_instance_;
  delete EndSession_reflection_;
  delete FrameContext::default_instance_;
  delete FrameContext_reflection_;
}

void protobuf_AddDesc_kama_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nkama.proto\022\rkama.protocol\"\211\001\n\010Envelope"
    "\022#\n\005frame\030\001 \001(\0132\024.kama.protocol.Frame\022)\n"
    "\010dataFile\030\002 \001(\0132\027.kama.protocol.DataFile"
    "\022-\n\nendSession\030\003 \001(\0132\031.kama.protocol.End"
    "Session\"\207\004\n\005Frame\022\031\n\021subscriber_number\030\001"
    " \001(\005\022!\n\031measuring_pointing_number\030\002 \002(\005\022"
    "\030\n\020information_type\030\003 \002(\005\022&\n\036distance_ch"
    "annel_tracking_mode\030\004 \002(\005\022#\n\033angle_chann"
    "el_tracking_mode\030\005 \002(\005\022$\n\034height_channel"
    "_tracking_mode\030\006 \001(\005\022\034\n\024response_signal_"
    "mode\030\010 \002(\005\022\024\n\014gain_gontrol\030\t \002(\005\022\031\n\021freq"
    "uency_control\030\n \002(\005\022\035\n\025antenna_pointing_"
    "mode\030\013 \002(\005\022\031\n\021distance_is_valid\030\014 \002(\005\022\021\n"
    "\tagc_level\030\r \002(\005\022\021\n\ttime_mode\030\016 \002(\005\022\014\n\004t"
    "ime\030\017 \002(\t\022\017\n\007azimuth\030\020 \002(\001\022\021\n\televation\030"
    "\021 \002(\001\022\020\n\010distance\030\022 \002(\005\022\016\n\006height\030\023 \001(\005\022"
    "0\n\013frameConext\030\024 \001(\0132\033.kama.protocol.Fra"
    "meContext\"T\n\010DataFile\022\016\n\006mp_num\030\001 \002(\005\022\021\n"
    "\tfile_name\030\002 \002(\t\022\022\n\ndata_bytes\030\003 \002(\014\022\021\n\t"
    "main_work\030\004 \001(\010\"\014\n\nEndSession\"G\n\014FrameCo"
    "ntext\022\020\n\010work_num\030\001 \002(\005\022\022\n\nlaunch_num\030\002 "
    "\002(\005\022\021\n\tmain_work\030\003 \002(\010", 862);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kama.proto", &protobuf_RegisterTypes);
  Envelope::default_instance_ = new Envelope();
  Frame::default_instance_ = new Frame();
  DataFile::default_instance_ = new DataFile();
  EndSession::default_instance_ = new EndSession();
  FrameContext::default_instance_ = new FrameContext();
  Envelope::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  DataFile::default_instance_->InitAsDefaultInstance();
  EndSession::default_instance_->InitAsDefaultInstance();
  FrameContext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kama_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kama_2eproto {
  StaticDescriptorInitializer_kama_2eproto() {
    protobuf_AddDesc_kama_2eproto();
  }
} static_descriptor_initializer_kama_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Envelope::kFrameFieldNumber;
const int Envelope::kDataFileFieldNumber;
const int Envelope::kEndSessionFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  frame_ = const_cast< ::kama::protocol::Frame*>(&::kama::protocol::Frame::default_instance());
  datafile_ = const_cast< ::kama::protocol::DataFile*>(&::kama::protocol::DataFile::default_instance());
  endsession_ = const_cast< ::kama::protocol::EndSession*>(&::kama::protocol::EndSession::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  frame_ = NULL;
  datafile_ = NULL;
  endsession_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete frame_;
    delete datafile_;
    delete endsession_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frame()) {
      if (frame_ != NULL) frame_->::kama::protocol::Frame::Clear();
    }
    if (has_datafile()) {
      if (datafile_ != NULL) datafile_->::kama::protocol::DataFile::Clear();
    }
    if (has_endsession()) {
      if (endsession_ != NULL) endsession_->::kama::protocol::EndSession::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kama.protocol.Frame frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataFile;
        break;
      }

      // optional .kama.protocol.DataFile dataFile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datafile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endSession;
        break;
      }

      // optional .kama.protocol.EndSession endSession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endSession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endsession()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .kama.protocol.Frame frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frame(), output);
  }

  // optional .kama.protocol.DataFile dataFile = 2;
  if (has_datafile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datafile(), output);
  }

  // optional .kama.protocol.EndSession endSession = 3;
  if (has_endsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endsession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .kama.protocol.Frame frame = 1;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frame(), target);
  }

  // optional .kama.protocol.DataFile dataFile = 2;
  if (has_datafile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datafile(), target);
  }

  // optional .kama.protocol.EndSession endSession = 3;
  if (has_endsession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->endsession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kama.protocol.Frame frame = 1;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

    // optional .kama.protocol.DataFile dataFile = 2;
    if (has_datafile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datafile());
    }

    // optional .kama.protocol.EndSession endSession = 3;
    if (has_endsession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endsession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      mutable_frame()->::kama::protocol::Frame::MergeFrom(from.frame());
    }
    if (from.has_datafile()) {
      mutable_datafile()->::kama::protocol::DataFile::MergeFrom(from.datafile());
    }
    if (from.has_endsession()) {
      mutable_endsession()->::kama::protocol::EndSession::MergeFrom(from.endsession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {

  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  if (has_datafile()) {
    if (!this->datafile().IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(frame_, other->frame_);
    std::swap(datafile_, other->datafile_);
    std::swap(endsession_, other->endsession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Frame::kSubscriberNumberFieldNumber;
const int Frame::kMeasuringPointingNumberFieldNumber;
const int Frame::kInformationTypeFieldNumber;
const int Frame::kDistanceChannelTrackingModeFieldNumber;
const int Frame::kAngleChannelTrackingModeFieldNumber;
const int Frame::kHeightChannelTrackingModeFieldNumber;
const int Frame::kResponseSignalModeFieldNumber;
const int Frame::kGainGontrolFieldNumber;
const int Frame::kFrequencyControlFieldNumber;
const int Frame::kAntennaPointingModeFieldNumber;
const int Frame::kDistanceIsValidFieldNumber;
const int Frame::kAgcLevelFieldNumber;
const int Frame::kTimeModeFieldNumber;
const int Frame::kTimeFieldNumber;
const int Frame::kAzimuthFieldNumber;
const int Frame::kElevationFieldNumber;
const int Frame::kDistanceFieldNumber;
const int Frame::kHeightFieldNumber;
const int Frame::kFrameConextFieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Frame::InitAsDefaultInstance() {
  frameconext_ = const_cast< ::kama::protocol::FrameContext*>(&::kama::protocol::FrameContext::default_instance());
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  subscriber_number_ = 0;
  measuring_pointing_number_ = 0;
  information_type_ = 0;
  distance_channel_tracking_mode_ = 0;
  angle_channel_tracking_mode_ = 0;
  height_channel_tracking_mode_ = 0;
  response_signal_mode_ = 0;
  gain_gontrol_ = 0;
  frequency_control_ = 0;
  antenna_pointing_mode_ = 0;
  distance_is_valid_ = 0;
  agc_level_ = 0;
  time_mode_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  azimuth_ = 0;
  elevation_ = 0;
  distance_ = 0;
  height_ = 0;
  frameconext_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  SharedDtor();
}

void Frame::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
    delete frameconext_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subscriber_number_ = 0;
    measuring_pointing_number_ = 0;
    information_type_ = 0;
    distance_channel_tracking_mode_ = 0;
    angle_channel_tracking_mode_ = 0;
    height_channel_tracking_mode_ = 0;
    response_signal_mode_ = 0;
    gain_gontrol_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    frequency_control_ = 0;
    antenna_pointing_mode_ = 0;
    distance_is_valid_ = 0;
    agc_level_ = 0;
    time_mode_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    azimuth_ = 0;
    elevation_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    distance_ = 0;
    height_ = 0;
    if (has_frameconext()) {
      if (frameconext_ != NULL) frameconext_->::kama::protocol::FrameContext::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 subscriber_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscriber_number_)));
          set_has_subscriber_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_measuring_pointing_number;
        break;
      }

      // required int32 measuring_pointing_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_measuring_pointing_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measuring_pointing_number_)));
          set_has_measuring_pointing_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_information_type;
        break;
      }

      // required int32 information_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_information_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &information_type_)));
          set_has_information_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_distance_channel_tracking_mode;
        break;
      }

      // required int32 distance_channel_tracking_mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance_channel_tracking_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_channel_tracking_mode_)));
          set_has_distance_channel_tracking_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_angle_channel_tracking_mode;
        break;
      }

      // required int32 angle_channel_tracking_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle_channel_tracking_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_channel_tracking_mode_)));
          set_has_angle_channel_tracking_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_height_channel_tracking_mode;
        break;
      }

      // optional int32 height_channel_tracking_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height_channel_tracking_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_channel_tracking_mode_)));
          set_has_height_channel_tracking_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_response_signal_mode;
        break;
      }

      // required int32 response_signal_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_signal_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_signal_mode_)));
          set_has_response_signal_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gain_gontrol;
        break;
      }

      // required int32 gain_gontrol = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_gontrol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_gontrol_)));
          set_has_gain_gontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_frequency_control;
        break;
      }

      // required int32 frequency_control = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_control_)));
          set_has_frequency_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_antenna_pointing_mode;
        break;
      }

      // required int32 antenna_pointing_mode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antenna_pointing_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antenna_pointing_mode_)));
          set_has_antenna_pointing_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_distance_is_valid;
        break;
      }

      // required int32 distance_is_valid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_is_valid_)));
          set_has_distance_is_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_agc_level;
        break;
      }

      // required int32 agc_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agc_level_)));
          set_has_agc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_time_mode;
        break;
      }

      // required int32 time_mode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_mode_)));
          set_has_time_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_time;
        break;
      }

      // required string time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_azimuth;
        break;
      }

      // required double azimuth = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_elevation;
        break;
      }

      // required double elevation = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_distance;
        break;
      }

      // required int32 distance = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_height;
        break;
      }

      // optional int32 height = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_frameConext;
        break;
      }

      // optional .kama.protocol.FrameContext frameConext = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameConext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frameconext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 subscriber_number = 1;
  if (has_subscriber_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subscriber_number(), output);
  }

  // required int32 measuring_pointing_number = 2;
  if (has_measuring_pointing_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->measuring_pointing_number(), output);
  }

  // required int32 information_type = 3;
  if (has_information_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->information_type(), output);
  }

  // required int32 distance_channel_tracking_mode = 4;
  if (has_distance_channel_tracking_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->distance_channel_tracking_mode(), output);
  }

  // required int32 angle_channel_tracking_mode = 5;
  if (has_angle_channel_tracking_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->angle_channel_tracking_mode(), output);
  }

  // optional int32 height_channel_tracking_mode = 6;
  if (has_height_channel_tracking_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height_channel_tracking_mode(), output);
  }

  // required int32 response_signal_mode = 8;
  if (has_response_signal_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->response_signal_mode(), output);
  }

  // required int32 gain_gontrol = 9;
  if (has_gain_gontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gain_gontrol(), output);
  }

  // required int32 frequency_control = 10;
  if (has_frequency_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->frequency_control(), output);
  }

  // required int32 antenna_pointing_mode = 11;
  if (has_antenna_pointing_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->antenna_pointing_mode(), output);
  }

  // required int32 distance_is_valid = 12;
  if (has_distance_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->distance_is_valid(), output);
  }

  // required int32 agc_level = 13;
  if (has_agc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->agc_level(), output);
  }

  // required int32 time_mode = 14;
  if (has_time_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->time_mode(), output);
  }

  // required string time = 15;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->time(), output);
  }

  // required double azimuth = 16;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->azimuth(), output);
  }

  // required double elevation = 17;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->elevation(), output);
  }

  // required int32 distance = 18;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->distance(), output);
  }

  // optional int32 height = 19;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->height(), output);
  }

  // optional .kama.protocol.FrameContext frameConext = 20;
  if (has_frameconext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->frameconext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 subscriber_number = 1;
  if (has_subscriber_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->subscriber_number(), target);
  }

  // required int32 measuring_pointing_number = 2;
  if (has_measuring_pointing_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->measuring_pointing_number(), target);
  }

  // required int32 information_type = 3;
  if (has_information_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->information_type(), target);
  }

  // required int32 distance_channel_tracking_mode = 4;
  if (has_distance_channel_tracking_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->distance_channel_tracking_mode(), target);
  }

  // required int32 angle_channel_tracking_mode = 5;
  if (has_angle_channel_tracking_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->angle_channel_tracking_mode(), target);
  }

  // optional int32 height_channel_tracking_mode = 6;
  if (has_height_channel_tracking_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height_channel_tracking_mode(), target);
  }

  // required int32 response_signal_mode = 8;
  if (has_response_signal_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->response_signal_mode(), target);
  }

  // required int32 gain_gontrol = 9;
  if (has_gain_gontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gain_gontrol(), target);
  }

  // required int32 frequency_control = 10;
  if (has_frequency_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->frequency_control(), target);
  }

  // required int32 antenna_pointing_mode = 11;
  if (has_antenna_pointing_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->antenna_pointing_mode(), target);
  }

  // required int32 distance_is_valid = 12;
  if (has_distance_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->distance_is_valid(), target);
  }

  // required int32 agc_level = 13;
  if (has_agc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->agc_level(), target);
  }

  // required int32 time_mode = 14;
  if (has_time_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->time_mode(), target);
  }

  // required string time = 15;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->time(), target);
  }

  // required double azimuth = 16;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->azimuth(), target);
  }

  // required double elevation = 17;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->elevation(), target);
  }

  // required int32 distance = 18;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->distance(), target);
  }

  // optional int32 height = 19;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->height(), target);
  }

  // optional .kama.protocol.FrameContext frameConext = 20;
  if (has_frameconext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->frameconext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 subscriber_number = 1;
    if (has_subscriber_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subscriber_number());
    }

    // required int32 measuring_pointing_number = 2;
    if (has_measuring_pointing_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->measuring_pointing_number());
    }

    // required int32 information_type = 3;
    if (has_information_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->information_type());
    }

    // required int32 distance_channel_tracking_mode = 4;
    if (has_distance_channel_tracking_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance_channel_tracking_mode());
    }

    // required int32 angle_channel_tracking_mode = 5;
    if (has_angle_channel_tracking_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle_channel_tracking_mode());
    }

    // optional int32 height_channel_tracking_mode = 6;
    if (has_height_channel_tracking_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height_channel_tracking_mode());
    }

    // required int32 response_signal_mode = 8;
    if (has_response_signal_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_signal_mode());
    }

    // required int32 gain_gontrol = 9;
    if (has_gain_gontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain_gontrol());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 frequency_control = 10;
    if (has_frequency_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frequency_control());
    }

    // required int32 antenna_pointing_mode = 11;
    if (has_antenna_pointing_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antenna_pointing_mode());
    }

    // required int32 distance_is_valid = 12;
    if (has_distance_is_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance_is_valid());
    }

    // required int32 agc_level = 13;
    if (has_agc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agc_level());
    }

    // required int32 time_mode = 14;
    if (has_time_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_mode());
    }

    // required string time = 15;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required double azimuth = 16;
    if (has_azimuth()) {
      total_size += 2 + 8;
    }

    // required double elevation = 17;
    if (has_elevation()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 distance = 18;
    if (has_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 height = 19;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .kama.protocol.FrameContext frameConext = 20;
    if (has_frameconext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frameconext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriber_number()) {
      set_subscriber_number(from.subscriber_number());
    }
    if (from.has_measuring_pointing_number()) {
      set_measuring_pointing_number(from.measuring_pointing_number());
    }
    if (from.has_information_type()) {
      set_information_type(from.information_type());
    }
    if (from.has_distance_channel_tracking_mode()) {
      set_distance_channel_tracking_mode(from.distance_channel_tracking_mode());
    }
    if (from.has_angle_channel_tracking_mode()) {
      set_angle_channel_tracking_mode(from.angle_channel_tracking_mode());
    }
    if (from.has_height_channel_tracking_mode()) {
      set_height_channel_tracking_mode(from.height_channel_tracking_mode());
    }
    if (from.has_response_signal_mode()) {
      set_response_signal_mode(from.response_signal_mode());
    }
    if (from.has_gain_gontrol()) {
      set_gain_gontrol(from.gain_gontrol());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_frequency_control()) {
      set_frequency_control(from.frequency_control());
    }
    if (from.has_antenna_pointing_mode()) {
      set_antenna_pointing_mode(from.antenna_pointing_mode());
    }
    if (from.has_distance_is_valid()) {
      set_distance_is_valid(from.distance_is_valid());
    }
    if (from.has_agc_level()) {
      set_agc_level(from.agc_level());
    }
    if (from.has_time_mode()) {
      set_time_mode(from.time_mode());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_frameconext()) {
      mutable_frameconext()->::kama::protocol::FrameContext::MergeFrom(from.frameconext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffde) != 0x0001ffde) return false;

  if (has_frameconext()) {
    if (!this->frameconext().IsInitialized()) return false;
  }
  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(subscriber_number_, other->subscriber_number_);
    std::swap(measuring_pointing_number_, other->measuring_pointing_number_);
    std::swap(information_type_, other->information_type_);
    std::swap(distance_channel_tracking_mode_, other->distance_channel_tracking_mode_);
    std::swap(angle_channel_tracking_mode_, other->angle_channel_tracking_mode_);
    std::swap(height_channel_tracking_mode_, other->height_channel_tracking_mode_);
    std::swap(response_signal_mode_, other->response_signal_mode_);
    std::swap(gain_gontrol_, other->gain_gontrol_);
    std::swap(frequency_control_, other->frequency_control_);
    std::swap(antenna_pointing_mode_, other->antenna_pointing_mode_);
    std::swap(distance_is_valid_, other->distance_is_valid_);
    std::swap(agc_level_, other->agc_level_);
    std::swap(time_mode_, other->time_mode_);
    std::swap(time_, other->time_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(distance_, other->distance_);
    std::swap(height_, other->height_);
    std::swap(frameconext_, other->frameconext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataFile::kMpNumFieldNumber;
const int DataFile::kFileNameFieldNumber;
const int DataFile::kDataBytesFieldNumber;
const int DataFile::kMainWorkFieldNumber;
#endif  // !_MSC_VER

DataFile::DataFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile::InitAsDefaultInstance() {
}

DataFile::DataFile(const DataFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile::SharedCtor() {
  _cached_size_ = 0;
  mp_num_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  main_work_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile::~DataFile() {
  SharedDtor();
}

void DataFile::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (data_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete data_bytes_;
  }
  if (this != default_instance_) {
  }
}

void DataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_descriptor_;
}

const DataFile& DataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

DataFile* DataFile::default_instance_ = NULL;

DataFile* DataFile::New() const {
  return new DataFile;
}

void DataFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mp_num_ = 0;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_data_bytes()) {
      if (data_bytes_ != &::google::protobuf::internal::kEmptyString) {
        data_bytes_->clear();
      }
    }
    main_work_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mp_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_num_)));
          set_has_mp_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // required string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_bytes;
        break;
      }

      // required bytes data_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_main_work;
        break;
      }

      // optional bool main_work = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_work:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_work_)));
          set_has_main_work();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mp_num = 1;
  if (has_mp_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mp_num(), output);
  }

  // required string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  // required bytes data_bytes = 3;
  if (has_data_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data_bytes(), output);
  }

  // optional bool main_work = 4;
  if (has_main_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->main_work(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mp_num = 1;
  if (has_mp_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mp_num(), target);
  }

  // required string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // required bytes data_bytes = 3;
  if (has_data_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data_bytes(), target);
  }

  // optional bool main_work = 4;
  if (has_main_work()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->main_work(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mp_num = 1;
    if (has_mp_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_num());
    }

    // required string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required bytes data_bytes = 3;
    if (has_data_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_bytes());
    }

    // optional bool main_work = 4;
    if (has_main_work()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile::MergeFrom(const DataFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mp_num()) {
      set_mp_num(from.mp_num());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_data_bytes()) {
      set_data_bytes(from.data_bytes());
    }
    if (from.has_main_work()) {
      set_main_work(from.main_work());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile::CopyFrom(const DataFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataFile::Swap(DataFile* other) {
  if (other != this) {
    std::swap(mp_num_, other->mp_num_);
    std::swap(file_name_, other->file_name_);
    std::swap(data_bytes_, other->data_bytes_);
    std::swap(main_work_, other->main_work_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataFile_descriptor_;
  metadata.reflection = DataFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EndSession::EndSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndSession::InitAsDefaultInstance() {
}

EndSession::EndSession(const EndSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndSession::~EndSession() {
  SharedDtor();
}

void EndSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndSession_descriptor_;
}

const EndSession& EndSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

EndSession* EndSession::default_instance_ = NULL;

EndSession* EndSession::New() const {
  return new EndSession;
}

void EndSession::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EndSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndSession::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndSession::MergeFrom(const EndSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndSession::CopyFrom(const EndSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndSession::IsInitialized() const {

  return true;
}

void EndSession::Swap(EndSession* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndSession_descriptor_;
  metadata.reflection = EndSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameContext::kWorkNumFieldNumber;
const int FrameContext::kLaunchNumFieldNumber;
const int FrameContext::kMainWorkFieldNumber;
#endif  // !_MSC_VER

FrameContext::FrameContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameContext::InitAsDefaultInstance() {
}

FrameContext::FrameContext(const FrameContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameContext::SharedCtor() {
  _cached_size_ = 0;
  work_num_ = 0;
  launch_num_ = 0;
  main_work_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameContext::~FrameContext() {
  SharedDtor();
}

void FrameContext::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameContext_descriptor_;
}

const FrameContext& FrameContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

FrameContext* FrameContext::default_instance_ = NULL;

FrameContext* FrameContext::New() const {
  return new FrameContext;
}

void FrameContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    work_num_ = 0;
    launch_num_ = 0;
    main_work_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 work_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &work_num_)));
          set_has_work_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_launch_num;
        break;
      }

      // required int32 launch_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launch_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_num_)));
          set_has_launch_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_main_work;
        break;
      }

      // required bool main_work = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_work:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_work_)));
          set_has_main_work();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 work_num = 1;
  if (has_work_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->work_num(), output);
  }

  // required int32 launch_num = 2;
  if (has_launch_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->launch_num(), output);
  }

  // required bool main_work = 3;
  if (has_main_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->main_work(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 work_num = 1;
  if (has_work_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->work_num(), target);
  }

  // required int32 launch_num = 2;
  if (has_launch_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->launch_num(), target);
  }

  // required bool main_work = 3;
  if (has_main_work()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->main_work(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 work_num = 1;
    if (has_work_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->work_num());
    }

    // required int32 launch_num = 2;
    if (has_launch_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_num());
    }

    // required bool main_work = 3;
    if (has_main_work()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameContext::MergeFrom(const FrameContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_work_num()) {
      set_work_num(from.work_num());
    }
    if (from.has_launch_num()) {
      set_launch_num(from.launch_num());
    }
    if (from.has_main_work()) {
      set_main_work(from.main_work());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameContext::CopyFrom(const FrameContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FrameContext::Swap(FrameContext* other) {
  if (other != this) {
    std::swap(work_num_, other->work_num_);
    std::swap(launch_num_, other->launch_num_);
    std::swap(main_work_, other->main_work_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameContext_descriptor_;
  metadata.reflection = FrameContext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace kama

// @@protoc_insertion_point(global_scope)
